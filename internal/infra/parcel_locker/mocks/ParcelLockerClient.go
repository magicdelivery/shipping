// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "shipping/internal/domain/model"

	mock "github.com/stretchr/testify/mock"

	parcel_locker "shipping/internal/infra/parcel_locker"
)

// ParcelLockerClient is an autogenerated mock type for the ParcelLockerClient type
type ParcelLockerClient struct {
	mock.Mock
}

// FindParcelLockersNear provides a mock function with given fields: ctx, shipping, distance
func (_m *ParcelLockerClient) FindParcelLockersNear(ctx context.Context, shipping *model.Customer, distance float64) (parcel_locker.ParcelLockersNear, error) {
	ret := _m.Called(ctx, shipping, distance)

	if len(ret) == 0 {
		panic("no return value specified for FindParcelLockersNear")
	}

	var r0 parcel_locker.ParcelLockersNear
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Customer, float64) (parcel_locker.ParcelLockersNear, error)); ok {
		return rf(ctx, shipping, distance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Customer, float64) parcel_locker.ParcelLockersNear); ok {
		r0 = rf(ctx, shipping, distance)
	} else {
		r0 = ret.Get(0).(parcel_locker.ParcelLockersNear)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Customer, float64) error); ok {
		r1 = rf(ctx, shipping, distance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewParcelLockerClient creates a new instance of ParcelLockerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParcelLockerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParcelLockerClient {
	mock := &ParcelLockerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
